---
- name: "Logicwax new host init"
  become: true
  hosts: 127.0.0.1
  connection: local
  tasks:

    - name: Install APT packages
      apt:
        pkg:
        - ccze
        - curl
        - emacs
        - exuberant-ctags
        - fonts-powerline
        - gnupg2
        - gnutls-bin
        - gpgv
        - gpgv2
        - htop
        - keyutils
        - libccid
        - libpam-ssh-agent-auth
        - libpcsclite1
        - monkeysphere
        - ncdu
        - openssh-server
        - pass
        - qtpass
        - pcscd
        - pgpdump
        - pinentry-tty
        - powerline
        - python-dev-is-python3
        - rsync
        - scdaemon
        - strace
        - tig
        - u2f-host
        - yubikey-personalization
        - vim
        - zsh
        - zsh-autosuggestions
        - zsh-syntax-highlighting

    - name: Install oh-my-zsh
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      args:
          creates: /home/{{ user }}/.oh-my-zsh
      become: yes
      become_user: "{{ user }}"

    - name: Changing shell to zsh
      shell: chsh -s /bin/zsh {{ user }}

    - name: Config oh-my-zsh theme
      block:
      - shell: |
          test -f /home/{{ user }}/.zshrc && mv -f /home/{{ user }}/.zshrc /home/{{ user }}/.zshrc.bak
          cp /home/{{ user }}/.oh-my-zsh/templates/zshrc.zsh-template /home/{{ user }}/.zshrc || true
      - lineinfile:
          dest: /home/{{ user }}/.zshrc
          state: present
          regexp: '^ZSH_THEME=.*'
          line: 'ZSH_THEME="agnoster"'
      - lineinfile:
          dest: /home/{{ user }}/.zshrc
          state: present
          insertafter: EOF
          line: 'source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh'
      - lineinfile:
          dest: /home/{{ user }}/.zshrc
          state: present
          insertafter: EOF
          line: 'source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh'
      become: yes
      become_user: "{{ user }}"

    - name: Install SSH key
      block:
      - file:
          path: /etc/security/authorized_keys
          state: touch
          owner: root
          group: root
          mode: "0644"

    - name: Configure SSHd to use authorized_keys
      lineinfile:
         dest: /etc/ssh/sshd_config
         state: present
         regexp: '.*#.*AuthorizedKeysFile.*'
         line: 'AuthorizedKeysFile  /etc/security/authorized_keys'

    - name: SUDO Yubikey Auth
      block:
      - lineinfile:
          dest: /etc/pam.d/common-auth
          state: present
          insertafter: BOF
          line: 'auth sufficient pam_ssh_agent_auth.so file=/etc/security/authorized_keys'
      - lineinfile:
          path: /etc/sudoers
          state: present
          insertafter: '^%sudo.*ALL=\(ALL:ALL\) ALL$'
          line: 'Defaults env_keep += SSH_AUTH_SOCK'
          validate: '/usr/sbin/visudo -cf %s'

    - name: Support GPG agent forwarding
      block:
      - lineinfile:
          dest: /etc/ssh/sshd_config
          state: present
          insertafter: EOF
          line: 'StreamLocalBindUnlink yes'
      - lineinfile:
          dest: /etc/ssh/sshd_config
          state: present
          regexp: '^PasswordAuthentication'
          line: 'PasswordAuthentication no'
      - lineinfile:
          dest: /home/{{ user }}/.gnupg/gpg-agent.conf
          state: present
          create: yes
          owner: "{{ user }}"
          group: "{{ user }}"
          mode: "0644"
          insertafter: BOF
          line: 'enable-ssh-support'
      - lineinfile:
          dest: /home/{{ user }}/.gnupg/gpg-agent.conf
          state: present
          insertafter: 'enable-ssh-support'
          line: 'pinentry-program /usr/bin/pinentry-tty'

    - name: Fix QtPass to honor SSH_AUTH_SOCK
      lineinfile:
        dest: /usr/share/applications/qtpass.desktop
        state: present
        regexp: '^Exec.*'
        line: 'Exec=sh -c "SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket) qtpass"'

    - name: Config for bash shell
      blockinfile:
        path: "/home/{{ user }}/.bashrc"
        block: |
          envfile="$HOME/.gnupg/gpg-agent.env"
          if ( [[ ! -e "$HOME/.gnupg/S.gpg-agent" ]] && \
          [[ ! -e "/var/run/user/$(id -u)/gnupg/S.gpg-agent" ]] );
          then
            killall pinentry > /dev/null 2>&1
            gpgconf --reload scdaemon > /dev/null 2>&1
            pkill -x -INT gpg-agent > /dev/null 2>&1
            gpg-agent --daemon --enable-ssh-support > $envfile
          fi
          if [[ ! -v SSH_AUTH_SOCK ]]; then
            export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
          fi
          export GPG_TTY=$(tty)
          gpg-connect-agent updatestartuptty /bye > /dev/null
          export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
          export PATH=$HOME/.local/bin:$PATH
          alias yubireset="rm -rfv ~/.gnupg/private-keys-v1.d && sudo killall -q -s 9 gpg-agent ssh-agent scdaemon pcscd || true && rm -f '~/.gnupg/*.lock' && source ~/.zshrc && gpg --card-status"
          mem() { ps aux | awk '{mem[$11]+=int($6/1024)}; END {for (i in mem) {print mem[i]" MB ",i}}' | grep $1 }

    - name: SSH github tweak (persistant connection)
      block:
      - name: Creates directory
        file:
          path: /home/{{ user }}/.ssh/
          state: directory
          owner: "{{ user }}"
          group: "{{ user }}"
          mode: "0744"
          recurse: yes
      - blockinfile:
          path: "/home/{{ user }}/.ssh/config"
          create: yes
          owner: "{{ user }}"
          group: "{{ user }}"
          block: |
            Host github.com
              ControlMaster auto
              ControlPath /run/user/%i/ssh-%r@%h:%p
              ControlPersist 300s

    - name: git tweaks
      blockinfile:
        path: "/home/{{ user }}/.gitconfig"
        create: yes
        owner: "{{ user }}"
        group: "{{ user }}"
        block: |
          #[user]
          #  email = Logicwax@gmail.com
          #  name = Matthew Brooks
          #  signingKey = 30B0BFDBA72CDEB3E7ADBE842BDE9CDB6D0FAD15  #get from `gpg --list-keys`
          #[commit]
          #  gpgSign = true
          [gpg]
              program = gpg
          [filter "lfs"]
              process = git-lfs filter-process
              required = true
              clean = git-lfs clean -- %f
              smudge = git-lfs smudge -- %f
          [alias]
              appraise = !/usr/bin/git-appraise
          [core]
              editor = emacs -nw
          [color]
              ui = auto
          [remote "origin"]
              fetch = +refs/pull/*/head:refs/remotes/origin/refs/pull/*/head
          [push]
              autoSetupRemote = true
              default = current

    - name: Config for z-shell
      blockinfile:
        path: "/home/{{ user }}/.zshrc"
        block: |
          envfile="$HOME/.gnupg/gpg-agent.env"
          if ( [[ ! -e "$HOME/.gnupg/S.gpg-agent" ]] && \
          [[ ! -e "/var/run/user/$(id -u)/gnupg/S.gpg-agent" ]] );
          then
            killall pinentry > /dev/null 2>&1
            gpgconf --reload scdaemon > /dev/null 2>&1
            pkill -x -INT gpg-agent > /dev/null 2>&1
            gpg-agent --daemon --enable-ssh-support > $envfile
          fi
          if [[ ! -v SSH_AUTH_SOCK ]]; then
            export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
          fi
          export GPG_TTY=$(tty)
          gpg-connect-agent updatestartuptty /bye > /dev/null
          alias yubireset="rm -rfv ~/.gnupg/private-keys-v1.d && sudo killall -q -s 9 gpg-agent ssh-agent scdaemon pcscd || true && rm -f '~/.gnupg/*.lock' && source ~/.zshrc && gpg --card-status"
          alias ll="ls -alhF"
          alias emacs="emacs -nw"
          export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
          export PATH=$HOME/.local/bin:$PATH
          mem() { ps aux | awk '{mem[$11]+=int($6/1024)}; END {for (i in mem) {print mem[i]" MB ",i}}' | grep $1 }
          # Change command prompt colors / appearance
          prompt_context() {
            if [[ "$USERNAME" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
              prompt_segment black default "%(!.%{{ "{" }}%F{{ "{" }}yellow{{ "}" }}%{{ "}" }}.)%F{{ "{" }}magenta{{ "}" }}%n%F{{ "{" }}cyan{{ "}" }}@%f%F{{ "{" }}green{{ "}" }}%m%f% "
            fi
          }
          prompt_dir() {
            prompt_segment 089 $CURRENT_FG '%~'
          }

    - name: Some one-offs
      block:
      - lineinfile:
          path: /home/{{ user }}/.bashrc
          state: present
          insertafter: EOF
          line: 'alias emacs="emacs -nw "'
      - lineinfile:
          dest: /home/{{ user }}/.byobu/.tmux.conf
          state: present
          create: yes
          owner: "{{ user }}"
          group: "{{ user }}"
          mode: "0644"
          insertafter: BOF
          line: 'set-option -g mouse on'

    - name: Create udev rule to auto-detect Yubikey insertion
      block:
        - template:
           src: templates/insert-yubi.sh
           dest: /usr/local/bin/
           mode: "0744"
        - template:
           src: templates/69.yubikey.rules
           dest: /etc/udev/rules.d/
           mode: "0644"
        - shell: "udevadm control -R"

    - name: Install emacs config
      shell: git clone  https://github.com/logicwax/emacsconfig.git /home/{{ user }}/.emacs.d
      args:
          creates: /home/{{ user }}/.emacs.d
      become: yes
      become_user: "{{ user }}"

    - name: Shrink massive GNOME titlebars to sane values
      template:
        src: templates/gtk.css
        dest: /home/{{ user }}/.config/gtk-3.0/gtk.css
        mode: "0644"

    - name: Install decent fonts
      block:
      - name: Creates directory
        file:
          path: /home/{{ user }}/.fonts/
          state: directory
          owner: "{{ user }}"
          group: "{{ user }}"
          mode: "0744"
          recurse: yes
      - ansible.builtin.git:
          repo: 'https://github.com/hbin/top-programming-fonts.git'
          dest: /home/{{ user }}/.fonts/top-programming-fonts
          version: master
      - ansible.builtin.git:
          repo: 'https://github.com/supercomputra/SF-Mono-Font.git'
          dest: /home/{{ user }}/.fonts/SF-Mono-Font
          version: master
      - shell: |
          cp /home/{{ user }}/.fonts/top-programming-fonts/*.ttf /home/{{ user }}/.fonts/
          cp /home/{{ user }}/.fonts/top-programming-fonts/Hack/*.ttf /home/{{ user }}/.fonts/
          rm -rf /home/{{ user }}/.fonts/top-programming-fonts
          cp /home/{{ user }}/.fonts/SF-Mono-Font/*.otf /home/{{ user }}/.fonts/
          rm -rf /home/{{ user }}/.fonts/SF-Mono-Font
          fc-cache -rv
      become: yes
      become_user: "{{ user }}"

    - name: Install emacs config
      block:
      - ansible.builtin.git:
          repo: 'https://github.com/logicwax/emacsconfig.git'
          dest: /home/{{ user }}/.emacs.d
          version: master
      become: yes
      become_user: "{{ user }}"

    - name: install latest nodejs (temporarily for vim plugins)
      block:
      - apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key
      - apt_repository:
          repo: 'deb http://deb.nodesource.com/node_16.x {{ ansible_distribution_release }} main'
          update_cache: yes
      - apt: name=nodejs

    - name: Install vim config
      block:
      - ansible.builtin.git:
          repo: 'https://github.com/drGrove/dotvim.git'
          dest: /home/{{ user }}/.vim
          version: master
      - lineinfile:
          dest: /home/{{ user }}/.vimrc
          state: present
          create: yes
          owner: "{{ user }}"
          group: "{{ user }}"
          mode: "0644"
          insertafter: BOF
          line: 'runtime vimrc'
      - replace:
          path: /home/{{ user }}/.vim/vimrc
          regexp: '^nmap <Left> <<'
          replace: 'nmap h <<'
      - replace:
          path: /home/{{ user }}/.vim/vimrc
          regexp: '^nmap <Right> >>'
          replace: 'nmap l >>'
      - replace:
          path: /home/{{ user }}/.vim/vimrc
          regexp: '^nmap <Up> \[e'
          replace: 'nmap k {{ "[" }}e'
      - replace:
          path: /home/{{ user }}/.vim/vimrc
          regexp: '^nmap <Down> \]e'
          replace: 'nmap j {{ "]" }}e'
      - replace:
          path: /home/{{ user }}/.vim/vimrc
          regexp: '^let g:solarized_contrast="high"'
          replace: 'let g:solarized_contrast="low"'
      - shell: "echo q | vim +PluginInstall +qall || true"
      - shell: cd /home/{{ user }}/.vim && ./install_deps.sh
      become: yes
      become_user: "{{ user }}"

    - name: Remove deb node, replace with nvm
      apt:
        state: absent
        pkg:
        - nodejs

    - name: Install nvm
      block:
      - shell: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash
        args:
          warn: false
